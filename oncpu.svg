<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>psi_avgs_work (1 samples, 2.56%)</title><rect x="282.3" y="341" width="30.3" height="15.0" fill="rgb(254,29,13)" rx="2" ry="2" />
<text  x="285.31" y="351.5" >ps..</text>
</g>
<g >
<title>__select (2 samples, 5.13%)</title><rect x="433.6" y="373" width="60.5" height="15.0" fill="rgb(214,83,29)" rx="2" ry="2" />
<text  x="436.59" y="383.5" >__select</text>
</g>
<g >
<title>x86_64_start_kernel (12 samples, 30.77%)</title><rect x="826.9" y="389" width="363.1" height="15.0" fill="rgb(234,86,6)" rx="2" ry="2" />
<text  x="829.92" y="399.5" >x86_64_start_kernel</text>
</g>
<g >
<title>x86_64_start_reservations (12 samples, 30.77%)</title><rect x="826.9" y="373" width="363.1" height="15.0" fill="rgb(206,49,54)" rx="2" ry="2" />
<text  x="829.92" y="383.5" >x86_64_start_reservations</text>
</g>
<g >
<title>cpu_startup_entry (11 samples, 28.21%)</title><rect x="494.1" y="373" width="332.8" height="15.0" fill="rgb(206,204,0)" rx="2" ry="2" />
<text  x="497.10" y="383.5" >cpu_startup_entry</text>
</g>
<g >
<title>__softirqentry_text_start (5 samples, 12.82%)</title><rect x="100.8" y="341" width="151.3" height="15.0" fill="rgb(225,195,10)" rx="2" ry="2" />
<text  x="103.77" y="351.5" >__softirqentry_text..</text>
</g>
<g >
<title>read_hpet (3 samples, 7.69%)</title><rect x="10.0" y="293" width="90.8" height="15.0" fill="rgb(224,170,20)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >read_hpet</text>
</g>
<g >
<title>do_vfs_ioctl (2 samples, 5.13%)</title><rect x="342.8" y="213" width="60.5" height="15.0" fill="rgb(248,180,18)" rx="2" ry="2" />
<text  x="345.82" y="223.5" >do_vfs..</text>
</g>
<g >
<title>nautilus (1 samples, 2.56%)</title><rect x="312.6" y="421" width="30.2" height="15.0" fill="rgb(241,40,5)" rx="2" ry="2" />
<text  x="315.56" y="431.5" >na..</text>
</g>
<g >
<title>net_rx_action (5 samples, 12.82%)</title><rect x="100.8" y="325" width="151.3" height="15.0" fill="rgb(208,204,43)" rx="2" ry="2" />
<text  x="103.77" y="335.5" >net_rx_action</text>
</g>
<g >
<title>[unknown] (1 samples, 2.56%)</title><rect x="312.6" y="405" width="30.2" height="15.0" fill="rgb(228,203,36)" rx="2" ry="2" />
<text  x="315.56" y="415.5" >[u..</text>
</g>
<g >
<title>__x64_sys_clock_gettime (3 samples, 7.69%)</title><rect x="10.0" y="341" width="90.8" height="15.0" fill="rgb(229,168,34)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >__x64_sys_..</text>
</g>
<g >
<title>ret_from_fork (1 samples, 2.56%)</title><rect x="282.3" y="405" width="30.3" height="15.0" fill="rgb(214,125,34)" rx="2" ry="2" />
<text  x="285.31" y="415.5" >re..</text>
</g>
<g >
<title>ktime_get (1 samples, 2.56%)</title><rect x="252.1" y="325" width="30.2" height="15.0" fill="rgb(205,206,39)" rx="2" ry="2" />
<text  x="255.05" y="335.5" >kt..</text>
</g>
<g >
<title>finish_task_switch (1 samples, 2.56%)</title><rect x="463.8" y="181" width="30.3" height="15.0" fill="rgb(224,216,45)" rx="2" ry="2" />
<text  x="466.85" y="191.5" >fi..</text>
</g>
<g >
<title>__run_timers.part.0 (1 samples, 2.56%)</title><rect x="796.7" y="213" width="30.2" height="15.0" fill="rgb(225,104,5)" rx="2" ry="2" />
<text  x="799.67" y="223.5" >__..</text>
</g>
<g >
<title>schedule_hrtimeout_range (1 samples, 2.56%)</title><rect x="463.8" y="245" width="30.3" height="15.0" fill="rgb(247,205,30)" rx="2" ry="2" />
<text  x="466.85" y="255.5" >sc..</text>
</g>
<g >
<title>read_hpet (1 samples, 2.56%)</title><rect x="403.3" y="261" width="30.3" height="15.0" fill="rgb(207,23,18)" rx="2" ry="2" />
<text  x="406.33" y="271.5" >re..</text>
</g>
<g >
<title>run_timer_softirq (1 samples, 2.56%)</title><rect x="796.7" y="229" width="30.2" height="15.0" fill="rgb(236,134,21)" rx="2" ry="2" />
<text  x="799.67" y="239.5" >ru..</text>
</g>
<g >
<title>native_safe_halt (11 samples, 28.21%)</title><rect x="494.1" y="309" width="332.8" height="15.0" fill="rgb(241,25,9)" rx="2" ry="2" />
<text  x="497.10" y="319.5" >native_safe_halt</text>
</g>
<g >
<title>copy_process (1 samples, 2.56%)</title><rect x="252.1" y="341" width="30.2" height="15.0" fill="rgb(241,181,43)" rx="2" ry="2" />
<text  x="255.05" y="351.5" >co..</text>
</g>
<g >
<title>do_select (1 samples, 2.56%)</title><rect x="463.8" y="277" width="30.3" height="15.0" fill="rgb(207,207,14)" rx="2" ry="2" />
<text  x="466.85" y="287.5" >do..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 2.56%)</title><rect x="403.3" y="325" width="30.3" height="15.0" fill="rgb(243,132,4)" rx="2" ry="2" />
<text  x="406.33" y="335.5" >do..</text>
</g>
<g >
<title>default_idle_call (12 samples, 30.77%)</title><rect x="826.9" y="277" width="363.1" height="15.0" fill="rgb(229,63,3)" rx="2" ry="2" />
<text  x="829.92" y="287.5" >default_idle_call</text>
</g>
<g >
<title>[unknown] (2 samples, 5.13%)</title><rect x="433.6" y="389" width="60.5" height="15.0" fill="rgb(209,74,47)" rx="2" ry="2" />
<text  x="436.59" y="399.5" >[unkno..</text>
</g>
<g >
<title>__x64_sys_poll (1 samples, 2.56%)</title><rect x="312.6" y="341" width="30.2" height="15.0" fill="rgb(239,97,36)" rx="2" ry="2" />
<text  x="315.56" y="351.5" >__..</text>
</g>
<g >
<title>perf_event_for_each_child (2 samples, 5.13%)</title><rect x="342.8" y="165" width="60.5" height="15.0" fill="rgb(237,154,43)" rx="2" ry="2" />
<text  x="345.82" y="175.5" >perf_e..</text>
</g>
<g >
<title>evsel__disable (2 samples, 5.13%)</title><rect x="342.8" y="325" width="60.5" height="15.0" fill="rgb(247,161,24)" rx="2" ry="2" />
<text  x="345.82" y="335.5" >evsel_..</text>
</g>
<g >
<title>main (2 samples, 5.13%)</title><rect x="342.8" y="389" width="60.5" height="15.0" fill="rgb(225,220,1)" rx="2" ry="2" />
<text  x="345.82" y="399.5" >main</text>
</g>
<g >
<title>kthread (5 samples, 12.82%)</title><rect x="100.8" y="389" width="151.3" height="15.0" fill="rgb(227,193,41)" rx="2" ry="2" />
<text  x="103.77" y="399.5" >kthread</text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 7.69%)</title><rect x="10.0" y="389" width="90.8" height="15.0" fill="rgb(234,128,42)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >__vdso_clo..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1 samples, 2.56%)</title><rect x="463.8" y="229" width="30.3" height="15.0" fill="rgb(236,157,18)" rx="2" ry="2" />
<text  x="466.85" y="239.5" >sc..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (5 samples, 12.82%)</title><rect x="1038.7" y="213" width="151.3" height="15.0" fill="rgb(251,200,50)" rx="2" ry="2" />
<text  x="1041.72" y="223.5" >smp_apic_timer_inte..</text>
</g>
<g >
<title>perf_evsel__disable (2 samples, 5.13%)</title><rect x="342.8" y="309" width="60.5" height="15.0" fill="rgb(208,77,10)" rx="2" ry="2" />
<text  x="345.82" y="319.5" >perf_e..</text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (3 samples, 7.69%)</title><rect x="10.0" y="405" width="90.8" height="15.0" fill="rgb(241,76,31)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >clock_gett..</text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 2.56%)</title><rect x="433.6" y="293" width="30.2" height="15.0" fill="rgb(225,150,17)" rx="2" ry="2" />
<text  x="436.59" y="303.5" >co..</text>
</g>
<g >
<title>arch_call_rest_init (12 samples, 30.77%)</title><rect x="826.9" y="341" width="363.1" height="15.0" fill="rgb(213,63,17)" rx="2" ry="2" />
<text  x="829.92" y="351.5" >arch_call_rest_init</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 2.56%)</title><rect x="312.6" y="357" width="30.2" height="15.0" fill="rgb(228,139,0)" rx="2" ry="2" />
<text  x="315.56" y="367.5" >do..</text>
</g>
<g >
<title>irq_exit (5 samples, 12.82%)</title><rect x="1038.7" y="197" width="151.3" height="15.0" fill="rgb(231,226,34)" rx="2" ry="2" />
<text  x="1041.72" y="207.5" >irq_exit</text>
</g>
<g >
<title>kthreadd (1 samples, 2.56%)</title><rect x="252.1" y="421" width="30.2" height="15.0" fill="rgb(227,199,28)" rx="2" ry="2" />
<text  x="255.05" y="431.5" >kt..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 5.13%)</title><rect x="342.8" y="277" width="60.5" height="15.0" fill="rgb(238,0,19)" rx="2" ry="2" />
<text  x="345.82" y="287.5" >entry_..</text>
</g>
<g >
<title>ktime_get_ts64 (1 samples, 2.56%)</title><rect x="403.3" y="277" width="30.3" height="15.0" fill="rgb(246,192,28)" rx="2" ry="2" />
<text  x="406.33" y="287.5" >kt..</text>
</g>
<g >
<title>cmd_record (2 samples, 5.13%)</title><rect x="342.8" y="357" width="60.5" height="15.0" fill="rgb(227,146,45)" rx="2" ry="2" />
<text  x="345.82" y="367.5" >cmd_re..</text>
</g>
<g >
<title>cpu_startup_entry (12 samples, 30.77%)</title><rect x="826.9" y="309" width="363.1" height="15.0" fill="rgb(223,121,47)" rx="2" ry="2" />
<text  x="829.92" y="319.5" >cpu_startup_entry</text>
</g>
<g >
<title>read_hpet (1 samples, 2.56%)</title><rect x="312.6" y="293" width="30.2" height="15.0" fill="rgb(244,106,46)" rx="2" ry="2" />
<text  x="315.56" y="303.5" >re..</text>
</g>
<g >
<title>event_function_call (2 samples, 5.13%)</title><rect x="342.8" y="133" width="60.5" height="15.0" fill="rgb(229,119,3)" rx="2" ry="2" />
<text  x="345.82" y="143.5" >event_..</text>
</g>
<g >
<title>perf_ioctl (2 samples, 5.13%)</title><rect x="342.8" y="197" width="60.5" height="15.0" fill="rgb(226,8,12)" rx="2" ry="2" />
<text  x="345.82" y="207.5" >perf_i..</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 2.56%)</title><rect x="796.7" y="293" width="30.2" height="15.0" fill="rgb(217,15,52)" rx="2" ry="2" />
<text  x="799.67" y="303.5" >ap..</text>
</g>
<g >
<title>do_idle (11 samples, 28.21%)</title><rect x="494.1" y="357" width="332.8" height="15.0" fill="rgb(247,73,43)" rx="2" ry="2" />
<text  x="497.10" y="367.5" >do_idle</text>
</g>
<g >
<title>__GI___ioctl (2 samples, 5.13%)</title><rect x="342.8" y="293" width="60.5" height="15.0" fill="rgb(250,47,35)" rx="2" ry="2" />
<text  x="345.82" y="303.5" >__GI__..</text>
</g>
<g >
<title>kworker/0:2 (1 samples, 2.56%)</title><rect x="282.3" y="421" width="30.3" height="15.0" fill="rgb(252,203,23)" rx="2" ry="2" />
<text  x="285.31" y="431.5" >kw..</text>
</g>
<g >
<title>__softirqentry_text_start (5 samples, 12.82%)</title><rect x="1038.7" y="181" width="151.3" height="15.0" fill="rgb(217,176,25)" rx="2" ry="2" />
<text  x="1041.72" y="191.5" >__softirqentry_text..</text>
</g>
<g >
<title>poll_select_set_timeout (1 samples, 2.56%)</title><rect x="403.3" y="293" width="30.3" height="15.0" fill="rgb(253,98,21)" rx="2" ry="2" />
<text  x="406.33" y="303.5" >po..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 5.13%)</title><rect x="342.8" y="261" width="60.5" height="15.0" fill="rgb(236,36,45)" rx="2" ry="2" />
<text  x="345.82" y="271.5" >do_sys..</text>
</g>
<g >
<title>rest_init (12 samples, 30.77%)</title><rect x="826.9" y="325" width="363.1" height="15.0" fill="rgb(253,56,2)" rx="2" ry="2" />
<text  x="829.92" y="335.5" >rest_init</text>
</g>
<g >
<title>irq_exit (1 samples, 2.56%)</title><rect x="796.7" y="261" width="30.2" height="15.0" fill="rgb(214,115,11)" rx="2" ry="2" />
<text  x="799.67" y="271.5" >ir..</text>
</g>
<g >
<title>__schedule (1 samples, 2.56%)</title><rect x="463.8" y="197" width="30.3" height="15.0" fill="rgb(231,171,45)" rx="2" ry="2" />
<text  x="466.85" y="207.5" >__..</text>
</g>
<g >
<title>kthreadd (1 samples, 2.56%)</title><rect x="252.1" y="389" width="30.2" height="15.0" fill="rgb(238,174,49)" rx="2" ry="2" />
<text  x="255.05" y="399.5" >kt..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 5.13%)</title><rect x="433.6" y="357" width="60.5" height="15.0" fill="rgb(215,167,21)" rx="2" ry="2" />
<text  x="436.59" y="367.5" >entry_..</text>
</g>
<g >
<title>run_builtin (2 samples, 5.13%)</title><rect x="342.8" y="373" width="60.5" height="15.0" fill="rgb(234,95,1)" rx="2" ry="2" />
<text  x="345.82" y="383.5" >run_bu..</text>
</g>
<g >
<title>arch_cpu_idle (12 samples, 30.77%)</title><rect x="826.9" y="261" width="363.1" height="15.0" fill="rgb(224,126,45)" rx="2" ry="2" />
<text  x="829.92" y="271.5" >arch_cpu_idle</text>
</g>
<g >
<title>sshd (2 samples, 5.13%)</title><rect x="433.6" y="421" width="60.5" height="15.0" fill="rgb(227,34,14)" rx="2" ry="2" />
<text  x="436.59" y="431.5" >sshd</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 2.56%)</title><rect x="312.6" y="373" width="30.2" height="15.0" fill="rgb(235,191,3)" rx="2" ry="2" />
<text  x="315.56" y="383.5" >en..</text>
</g>
<g >
<title>e1000_clean (5 samples, 12.82%)</title><rect x="100.8" y="309" width="151.3" height="15.0" fill="rgb(248,206,42)" rx="2" ry="2" />
<text  x="103.77" y="319.5" >e1000_clean</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 7.69%)</title><rect x="10.0" y="357" width="90.8" height="15.0" fill="rgb(252,44,30)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >do_syscall..</text>
</g>
<g >
<title>WebExtensions (3 samples, 7.69%)</title><rect x="10.0" y="421" width="90.8" height="15.0" fill="rgb(226,106,2)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >WebExtensi..</text>
</g>
<g >
<title>posix_ktime_get_ts (3 samples, 7.69%)</title><rect x="10.0" y="325" width="90.8" height="15.0" fill="rgb(226,137,26)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >posix_ktim..</text>
</g>
<g >
<title>core_sys_select (1 samples, 2.56%)</title><rect x="463.8" y="293" width="30.3" height="15.0" fill="rgb(218,179,35)" rx="2" ry="2" />
<text  x="466.85" y="303.5" >co..</text>
</g>
<g >
<title>evlist__disable (2 samples, 5.13%)</title><rect x="342.8" y="341" width="60.5" height="15.0" fill="rgb(216,89,39)" rx="2" ry="2" />
<text  x="345.82" y="351.5" >evlist..</text>
</g>
<g >
<title>start_thread (1 samples, 2.56%)</title><rect x="403.3" y="405" width="30.3" height="15.0" fill="rgb(234,69,4)" rx="2" ry="2" />
<text  x="406.33" y="415.5" >st..</text>
</g>
<g >
<title>swapper (23 samples, 58.97%)</title><rect x="494.1" y="421" width="695.9" height="15.0" fill="rgb(248,187,13)" rx="2" ry="2" />
<text  x="497.10" y="431.5" >swapper</text>
</g>
<g >
<title>all (39 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(222,31,6)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>start_secondary (11 samples, 28.21%)</title><rect x="494.1" y="389" width="332.8" height="15.0" fill="rgb(248,45,20)" rx="2" ry="2" />
<text  x="497.10" y="399.5" >start_secondary</text>
</g>
<g >
<title>arch_cpu_idle (11 samples, 28.21%)</title><rect x="494.1" y="325" width="332.8" height="15.0" fill="rgb(205,197,23)" rx="2" ry="2" />
<text  x="497.10" y="335.5" >arch_cpu_idle</text>
</g>
<g >
<title>poll_select_set_timeout (1 samples, 2.56%)</title><rect x="312.6" y="325" width="30.2" height="15.0" fill="rgb(209,220,42)" rx="2" ry="2" />
<text  x="315.56" y="335.5" >po..</text>
</g>
<g >
<title>do_idle (12 samples, 30.77%)</title><rect x="826.9" y="293" width="363.1" height="15.0" fill="rgb(249,160,30)" rx="2" ry="2" />
<text  x="829.92" y="303.5" >do_idle</text>
</g>
<g >
<title>kern_select (2 samples, 5.13%)</title><rect x="433.6" y="309" width="60.5" height="15.0" fill="rgb(221,171,4)" rx="2" ry="2" />
<text  x="436.59" y="319.5" >kern_s..</text>
</g>
<g >
<title>secondary_startup_64 (23 samples, 58.97%)</title><rect x="494.1" y="405" width="695.9" height="15.0" fill="rgb(240,102,45)" rx="2" ry="2" />
<text  x="497.10" y="415.5" >secondary_startup_64</text>
</g>
<g >
<title>smp_call_function_single (2 samples, 5.13%)</title><rect x="342.8" y="117" width="60.5" height="15.0" fill="rgb(219,111,16)" rx="2" ry="2" />
<text  x="345.82" y="127.5" >smp_ca..</text>
</g>
<g >
<title>process_one_work (1 samples, 2.56%)</title><rect x="282.3" y="357" width="30.3" height="15.0" fill="rgb(247,75,40)" rx="2" ry="2" />
<text  x="285.31" y="367.5" >pr..</text>
</g>
<g >
<title>ksys_ioctl (2 samples, 5.13%)</title><rect x="342.8" y="229" width="60.5" height="15.0" fill="rgb(207,51,17)" rx="2" ry="2" />
<text  x="345.82" y="239.5" >ksys_i..</text>
</g>
<g >
<title>__x64_sys_ioctl (2 samples, 5.13%)</title><rect x="342.8" y="245" width="60.5" height="15.0" fill="rgb(216,59,2)" rx="2" ry="2" />
<text  x="345.82" y="255.5" >__x64_..</text>
</g>
<g >
<title>_perf_ioctl (2 samples, 5.13%)</title><rect x="342.8" y="181" width="60.5" height="15.0" fill="rgb(219,44,53)" rx="2" ry="2" />
<text  x="345.82" y="191.5" >_perf_..</text>
</g>
<g >
<title>__x64_sys_poll (1 samples, 2.56%)</title><rect x="403.3" y="309" width="30.3" height="15.0" fill="rgb(242,209,26)" rx="2" ry="2" />
<text  x="406.33" y="319.5" >__..</text>
</g>
<g >
<title>ret_from_fork (1 samples, 2.56%)</title><rect x="252.1" y="405" width="30.2" height="15.0" fill="rgb(206,149,52)" rx="2" ry="2" />
<text  x="255.05" y="415.5" >re..</text>
</g>
<g >
<title>perf_evlist__poll (1 samples, 2.56%)</title><rect x="403.3" y="373" width="30.3" height="15.0" fill="rgb(241,48,9)" rx="2" ry="2" />
<text  x="406.33" y="383.5" >pe..</text>
</g>
<g >
<title>default_send_IPI_single (1 samples, 2.56%)</title><rect x="373.1" y="69" width="30.2" height="15.0" fill="rgb(238,201,10)" rx="2" ry="2" />
<text  x="376.08" y="79.5" >de..</text>
</g>
<g >
<title>native_send_call_func_single_ipi (1 samples, 2.56%)</title><rect x="373.1" y="85" width="30.2" height="15.0" fill="rgb(251,162,5)" rx="2" ry="2" />
<text  x="376.08" y="95.5" >na..</text>
</g>
<g >
<title>ksoftirqd/0 (5 samples, 12.82%)</title><rect x="100.8" y="421" width="151.3" height="15.0" fill="rgb(227,180,53)" rx="2" ry="2" />
<text  x="103.77" y="431.5" >ksoftirqd/0</text>
</g>
<g >
<title>collect_percpu_times (1 samples, 2.56%)</title><rect x="282.3" y="325" width="30.3" height="15.0" fill="rgb(236,197,4)" rx="2" ry="2" />
<text  x="285.31" y="335.5" >co..</text>
</g>
<g >
<title>smpboot_thread_fn (5 samples, 12.82%)</title><rect x="100.8" y="373" width="151.3" height="15.0" fill="rgb(245,156,14)" rx="2" ry="2" />
<text  x="103.77" y="383.5" >smpboot_thread_fn</text>
</g>
<g >
<title>_do_fork (1 samples, 2.56%)</title><rect x="252.1" y="357" width="30.2" height="15.0" fill="rgb(253,182,29)" rx="2" ry="2" />
<text  x="255.05" y="367.5" >_d..</text>
</g>
<g >
<title>read_hpet (1 samples, 2.56%)</title><rect x="252.1" y="309" width="30.2" height="15.0" fill="rgb(223,56,42)" rx="2" ry="2" />
<text  x="255.05" y="319.5" >re..</text>
</g>
<g >
<title>perf (3 samples, 7.69%)</title><rect x="342.8" y="421" width="90.8" height="15.0" fill="rgb(214,28,38)" rx="2" ry="2" />
<text  x="345.82" y="431.5" >perf</text>
</g>
<g >
<title>perf_evlist__poll_thread (1 samples, 2.56%)</title><rect x="403.3" y="389" width="30.3" height="15.0" fill="rgb(234,147,6)" rx="2" ry="2" />
<text  x="406.33" y="399.5" >pe..</text>
</g>
<g >
<title>__poll (1 samples, 2.56%)</title><rect x="312.6" y="389" width="30.2" height="15.0" fill="rgb(251,83,48)" rx="2" ry="2" />
<text  x="315.56" y="399.5" >__..</text>
</g>
<g >
<title>ret_from_fork (5 samples, 12.82%)</title><rect x="100.8" y="405" width="151.3" height="15.0" fill="rgb(239,45,14)" rx="2" ry="2" />
<text  x="103.77" y="415.5" >ret_from_fork</text>
</g>
<g >
<title>default_idle_call (11 samples, 28.21%)</title><rect x="494.1" y="341" width="332.8" height="15.0" fill="rgb(224,14,23)" rx="2" ry="2" />
<text  x="497.10" y="351.5" >default_idle_call</text>
</g>
<g >
<title>__poll (1 samples, 2.56%)</title><rect x="403.3" y="357" width="30.3" height="15.0" fill="rgb(232,218,46)" rx="2" ry="2" />
<text  x="406.33" y="367.5" >__..</text>
</g>
<g >
<title>_flat_send_IPI_mask (1 samples, 2.56%)</title><rect x="373.1" y="37" width="30.2" height="15.0" fill="rgb(239,39,11)" rx="2" ry="2" />
<text  x="376.08" y="47.5" >_f..</text>
</g>
<g >
<title>start_kernel (12 samples, 30.77%)</title><rect x="826.9" y="357" width="363.1" height="15.0" fill="rgb(207,194,51)" rx="2" ry="2" />
<text  x="829.92" y="367.5" >start_kernel</text>
</g>
<g >
<title>__libc_start_main (2 samples, 5.13%)</title><rect x="342.8" y="405" width="60.5" height="15.0" fill="rgb(224,125,26)" rx="2" ry="2" />
<text  x="345.82" y="415.5" >__libc..</text>
</g>
<g >
<title>native_safe_halt (12 samples, 30.77%)</title><rect x="826.9" y="245" width="363.1" height="15.0" fill="rgb(252,172,45)" rx="2" ry="2" />
<text  x="829.92" y="255.5" >native_safe_halt</text>
</g>
<g >
<title>schedule (1 samples, 2.56%)</title><rect x="463.8" y="213" width="30.3" height="15.0" fill="rgb(232,142,2)" rx="2" ry="2" />
<text  x="466.85" y="223.5" >sc..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 2.56%)</title><rect x="796.7" y="277" width="30.2" height="15.0" fill="rgb(240,170,14)" rx="2" ry="2" />
<text  x="799.67" y="287.5" >sm..</text>
</g>
<g >
<title>run_ksoftirqd (5 samples, 12.82%)</title><rect x="100.8" y="357" width="151.3" height="15.0" fill="rgb(248,74,42)" rx="2" ry="2" />
<text  x="103.77" y="367.5" >run_ksoftirqd</text>
</g>
<g >
<title>flat_send_IPI_mask (1 samples, 2.56%)</title><rect x="373.1" y="53" width="30.2" height="15.0" fill="rgb(244,116,51)" rx="2" ry="2" />
<text  x="376.08" y="63.5" >fl..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 2.56%)</title><rect x="403.3" y="341" width="30.3" height="15.0" fill="rgb(221,107,18)" rx="2" ry="2" />
<text  x="406.33" y="351.5" >en..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 7.69%)</title><rect x="10.0" y="373" width="90.8" height="15.0" fill="rgb(244,38,7)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >entry_SYSC..</text>
</g>
<g >
<title>kernel_thread (1 samples, 2.56%)</title><rect x="252.1" y="373" width="30.2" height="15.0" fill="rgb(221,44,8)" rx="2" ry="2" />
<text  x="255.05" y="383.5" >ke..</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 2.56%)</title><rect x="796.7" y="245" width="30.2" height="15.0" fill="rgb(237,42,44)" rx="2" ry="2" />
<text  x="799.67" y="255.5" >__..</text>
</g>
<g >
<title>[unknown] (2 samples, 5.13%)</title><rect x="433.6" y="405" width="60.5" height="15.0" fill="rgb(239,227,6)" rx="2" ry="2" />
<text  x="436.59" y="415.5" >[unkno..</text>
</g>
<g >
<title>worker_thread (1 samples, 2.56%)</title><rect x="282.3" y="373" width="30.3" height="15.0" fill="rgb(251,6,50)" rx="2" ry="2" />
<text  x="285.31" y="383.5" >wo..</text>
</g>
<g >
<title>__x64_sys_select (2 samples, 5.13%)</title><rect x="433.6" y="325" width="60.5" height="15.0" fill="rgb(206,116,1)" rx="2" ry="2" />
<text  x="436.59" y="335.5" >__x64_..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 5.13%)</title><rect x="433.6" y="341" width="60.5" height="15.0" fill="rgb(249,17,15)" rx="2" ry="2" />
<text  x="436.59" y="351.5" >do_sys..</text>
</g>
<g >
<title>poll_schedule_timeout.constprop.0 (1 samples, 2.56%)</title><rect x="463.8" y="261" width="30.3" height="15.0" fill="rgb(219,108,29)" rx="2" ry="2" />
<text  x="466.85" y="271.5" >po..</text>
</g>
<g >
<title>_perf_event_disable (2 samples, 5.13%)</title><rect x="342.8" y="149" width="60.5" height="15.0" fill="rgb(216,107,2)" rx="2" ry="2" />
<text  x="345.82" y="159.5" >_perf_..</text>
</g>
<g >
<title>ktime_get_ts64 (1 samples, 2.56%)</title><rect x="312.6" y="309" width="30.2" height="15.0" fill="rgb(249,100,27)" rx="2" ry="2" />
<text  x="315.56" y="319.5" >kt..</text>
</g>
<g >
<title>apic_timer_interrupt (5 samples, 12.82%)</title><rect x="1038.7" y="229" width="151.3" height="15.0" fill="rgb(239,136,14)" rx="2" ry="2" />
<text  x="1041.72" y="239.5" >apic_timer_interrupt</text>
</g>
<g >
<title>generic_exec_single (1 samples, 2.56%)</title><rect x="373.1" y="101" width="30.2" height="15.0" fill="rgb(223,63,10)" rx="2" ry="2" />
<text  x="376.08" y="111.5" >ge..</text>
</g>
<g >
<title>kthread (1 samples, 2.56%)</title><rect x="282.3" y="389" width="30.3" height="15.0" fill="rgb(246,176,34)" rx="2" ry="2" />
<text  x="285.31" y="399.5" >kt..</text>
</g>
<g >
<title>ktime_get_ts64 (3 samples, 7.69%)</title><rect x="10.0" y="309" width="90.8" height="15.0" fill="rgb(241,13,3)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >ktime_get_..</text>
</g>
</g>
</svg>
